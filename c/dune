(library
 (name OManifold_c)
 (public_name OManifold.c)
 (wrapped false)
 (libraries ctypes ctypes.foreign)
 (flags
  (:standard -w -9-16-27))
 (ctypes
  (build_flags_resolver
   (vendored
    ; HACK: multiple -I directives to work around cc commands being
    ; run from different relative directories.
    ; https://github.com/ocaml/dune/issues/5325
    (c_flags
     "-Ic/vendor/manifold/bindings/c/include"
     "-Ivendor/manifold/bindings/c/include")
    (c_library_flags %{read-lines:config/c_library_flags})))
  (headers
   (include "manifoldc.h"))
  (external_library_name libmanifoldc)
  (type_description
   (instance Types)
   (functor Manifold_c_type_descriptions))
  (function_description
   (concurrency sequential)
   (instance Funcs)
   (functor Manifold_c_function_descriptions))
  (generated_types Manifold_c_types)
  (generated_entry_point C))
 (foreign_archives manifoldc manifold meshIO))

; Build Manifold vendor

(rule
 (targets dllmanifoldc%{ext_dll} dllmanifold%{ext_dll} dllmeshIO%{ext_dll})
 (deps
  (source_tree vendor/manifold))
 (action
  (no-infer
   (progn
    (ignore-outputs
     (chdir
      vendor/manifold/build_so
      (progn
       (run
        cmake
        -DCMAKE_BUILD_TYPE=Release
        -DBUILD_SHARED_LIBS=ON
        -DMANIFOLD_EXPORT=ON
        -DMANIFOLD_PYBIND=OFF
        -DMANIFOLD_CBIND=ON
        -DMANIFOLD_USE_CUDA=%{read:config/use_cuda}
        -DMANIFOLD_PAR=OMP
        ..)
       (run make))))
    (copy
     vendor/manifold/build_so/bindings/c/libmanifoldc%{ext_dll}
     dllmanifoldc%{ext_dll})
    (copy
     vendor/manifold/build_so/src/manifold/libmanifold%{ext_dll}
     dllmanifold%{ext_dll})
    (copy
     vendor/manifold/build_so/test/meshIO/libmeshIO%{ext_dll}
     dllmeshIO%{ext_dll})))))

(rule
 (targets libmanifoldc.a libmanifold.a libmeshIO.a)
 (deps
  (source_tree vendor/manifold))
 (action
  (no-infer
   (progn
    (ignore-outputs
     (chdir
      vendor/manifold/build_a
      (progn
       (run
        cmake
        -DCMAKE_BUILD_TYPE=Release
        -DBUILD_SHARED_LIBS=OFF
        -DMANIFOLD_EXPORT=ON
        -DMANIFOLD_PYBIND=OFF
        -DMANIFOLD_CBIND=ON
        -DMANIFOLD_USE_CUDA=%{read:config/use_cuda}
        -DMANIFOLD_PAR=OMP
        ..)
       (run make))))
    (copy vendor/manifold/build_a/bindings/c/libmanifoldc.a libmanifoldc.a)
    (copy vendor/manifold/build_a/src/manifold/libmanifold.a libmanifold.a)
    (copy vendor/manifold/build_a/test/meshIO/libmeshIO.a libmeshIO.a)))))
